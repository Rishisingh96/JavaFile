package com.Java.Basic.Loop;

import java.util.Scanner;

public class Fibonacci_series {
    public static void Fibonacci_series1Way(int n) {


        /// 0 1 1 2 3 5 8 13...............
        int first = -1;
        int last = 1;
        int next;

        for (int i = 1; i <= n; i++) {
            next = first + last;
            first = last;
            last = next;
            System.out.print(next + " ");

        }
    }
    static void Fibonacci_series2ndWay(int n){
        int first = 0;
        int last = 1;
        int next;

        for (int i = 1; i <= n; i++) {
            System.out.print(first + " ");
            next = first + last;
            first = last;
            last = next;
        }
    }

    public static int Fibonacci_series3rdWayRecursion(int n){
        if (n<=1)
            return n;
        else
            return Fibonacci_series3rdWayRecursion(n-1)+Fibonacci_series3rdWayRecursion(n-2);
    }
    public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter the length of Fibonacci series you want:");
            int n = scanner.nextInt();
            System.out.println("Fibonacci series:");
//          Fibonacci_series1Way(n);
//            Fibonacci_series2ndWay(n);
            Fibonacci_series3rdWayRecursion(n);

            // for recursion
        for (int i = 0; i<n; i++){
            System.out.print(Fibonacci_series3rdWayRecursion(i)+ " ");
        }
    }
}

/*
Your Java code seems mostly correct for generating a Fibonacci series up to a given number `n`. However, there's a minor issue in your code: the series starts from 0, 1, 1, 2, 3, 5, 8, 13..., but your initial values for `first` and `last` are not aligned with this sequence. Instead of initializing `first` as `-1` and `last` as `1`, you should set `first` as `0` and `last` as `1`.

Here's the corrected code:

```java
package com.Java.Basic.Loop;

import java.util.Scanner;

public class Fibonacci_series {
    public static void main(String[] args) {
        int n;
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the length of Fibonacci series you want:");
        n = scanner.nextInt();
        /// 0 1 1 2 3 5 8 13...............
        int first = 0; // corrected initial value
        int last = 1; // corrected initial value
        int next = 0;

        for (int i = 1; i <= n; i++) {
            System.out.print(first + " ");
            next = first + last;
            first = last;
            last = next;
        }
    }
}
```

As for the algorithm and pseudocode, the Fibonacci sequence is generated by adding the two preceding numbers to get the next one. Here's the algorithm:

1. Start
2. Initialize variables `first` and `last` to `0` and `1` respectively.
3. Print `first`.
4. Calculate `next` as the sum of `first` and `last`.
5. Set `first` to `last` and `last` to `next`.
6. Repeat steps 3-5 until the desired number of terms is reached.
7. End

Pseudocode:
```
Initialize first = 0
Initialize last = 1
Print first
Repeat n times:
    next = first + last
    Print next
    first = last
    last = next
End Repeat
```

This pseudocode represents the logic used in the Java code.*/


/*
// using recursion

Sure, here's the pseudocode and algorithm for generating the Fibonacci series using recursion:

**Algorithm:**
1. Start
2. Define a recursive function `fibonacci(n)` that takes an integer `n` as input.
3. If `n` is less than or equal to 1, return `n`.
4. Otherwise, return the sum of `fibonacci(n-1)` and `fibonacci(n-2)`.
5. In the main function:
    - Take user input for the length of the Fibonacci series (`n`).
    - Print "Fibonacci series:"
    - Iterate from 0 to `n-1` and for each index `i`, call the `fibonacci(i)` function and print the result.
6. End

**Pseudocode:**
```
Function fibonacci(n)
    if n <= 1
        return n
    else
        return fibonacci(n - 1) + fibonacci(n - 2)

Function main()
    Declare n as integer
    Display "Enter the length of Fibonacci series you want:"
    Input n
    Display "Fibonacci series:"
    for i from 0 to n-1 do
        Print fibonacci(i)
    End for
End Function
```

This pseudocode represents the logic used in the provided Java code, where the Fibonacci series is generated using recursion.


// take examples

Sure, let's use an example to explain the Fibonacci series generation using recursion.

**Example:**
Let's say the user inputs `n = 7`.

**Explanation:**
1. We'll start by defining a recursive function `fibonacci(n)` to generate the Fibonacci series.

2. When `n = 7`, we want to print the first 7 terms of the Fibonacci series.

3. The `fibonacci()` function is called with `n = 7`. Inside the function:
    - Since `n` is greater than 1, it will recursively call itself with `fibonacci(6)` and `fibonacci(5)`.
    - `fibonacci(6)` will further call `fibonacci(5)` and `fibonacci(4)`.
    - This process continues until `n` becomes 1 or less.

4. When `fibonacci(1)` is reached, it returns `1`. Similarly, `fibonacci(0)` returns `0`.

5. Then, the function starts returning values from the recursive calls:
    - `fibonacci(2)` returns `1` (fibonacci(1) + fibonacci(0)).
    - `fibonacci(3)` returns `2` (fibonacci(2) + fibonacci(1)).
    - `fibonacci(4)` returns `3` (fibonacci(3) + fibonacci(2)).
    - `fibonacci(5)` returns `5` (fibonacci(4) + fibonacci(3)).
    - `fibonacci(6)` returns `8` (fibonacci(5) + fibonacci(4)).
    - `fibonacci(7)` returns `13` (fibonacci(6) + fibonacci(5)).

6. These values are printed in the main function one by one as the Fibonacci series.

**Output:**
```
Fibonacci series:
0 1 1 2 3 5 8 13
```

So, the program generates the Fibonacci series up to the specified length `n` using recursion, where each term is the sum of the two preceding terms. This recursive approach breaks down the problem into smaller subproblems until it reaches the base case (when `n` is 0 or 1), and then combines the solutions of these subproblems to solve the original problem.

*/