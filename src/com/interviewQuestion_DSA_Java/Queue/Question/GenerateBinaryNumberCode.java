package com.interviewQuestion_DSA_Java.Queue.Question;

import java.util.LinkedList;
import java.util.Queue;

public class GenerateBinaryNumberCode {

    // Function to generate and print binary numbers from 1 to N
    public static void generateBinaryNumbers(int N) {
        Queue<String> queue = new LinkedList<>();
        queue.add("1");

        // Loop until we generate all binary numbers up to N
        for (int i = 1; i <= N; i++) {
            String binary = queue.poll(); // Get the front of the queue
            System.out.print(binary + " "); // Print the binary number

            // Generate next two binary numbers and add them to the queue
            queue.add(binary + "0");
            queue.add(binary + "1");
        }
    }

    public static void main(String[] args) {
        int N = 5; // Example input
        generateBinaryNumbers(N);
    }
}
/*✅ Let’s do a Deep Dry Run of the code step by step to understand how the Generate Binary Number Code works.

📚 Problem Statement:
You are required to generate and print binary numbers from 1 to N using a queue.

📝 Input:
java
Copy
Edit
int N = 5;
🔥 Goal:
Generate binary numbers:

Copy
Edit
1 10 11 100 101
🎯 Approach Overview:
Queue Usage:

We use a queue to generate the binary numbers sequentially.

Each time we dequeue a number, we generate the next two binary numbers by appending 0 and 1 to it.

Logic:

Start by adding "1" to the queue.

Dequeue the front element, print it, and generate the next binary numbers by adding:

binary + "0"

binary + "1"

✅ Step 1: Create and Initialize Queue
java
Copy
Edit
Queue<String> queue = new LinkedList<>();
queue.add("1");  // Add the first binary number "1" to the queue
📌 Queue after initialization:
vbnet
Copy
Edit
Queue: ["1"]
✅ Step 2: Start Loop to Generate Binary Numbers
java
Copy
Edit
for (int i = 1; i <= N; i++) {
    String binary = queue.poll(); // Get the front of the queue
    System.out.print(binary + " "); // Print the binary number

    // Generate next two binary numbers
    queue.add(binary + "0");
    queue.add(binary + "1");
}
🔥 Dry Run:
🎉 Initial Setup:
makefile
Copy
Edit
N = 5
Queue: ["1"]
🔁 Iteration 1: i = 1
binary = queue.poll() → Dequeue "1"

Print: 1

Add next binaries:

"10" → Add binary + "0"

"11" → Add binary + "1"

📌 Queue after Iteration 1:
vbnet
Copy
Edit
Queue: ["10", "11"]
🔁 Iteration 2: i = 2
binary = queue.poll() → Dequeue "10"

Print: 10

Add next binaries:

"100" → Add binary + "0"

"101" → Add binary + "1"

📌 Queue after Iteration 2:
vbnet
Copy
Edit
Queue: ["11", "100", "101"]
🔁 Iteration 3: i = 3
binary = queue.poll() → Dequeue "11"

Print: 11

Add next binaries:

"110" → Add binary + "0"

"111" → Add binary + "1"

📌 Queue after Iteration 3:
vbnet
Copy
Edit
Queue: ["100", "101", "110", "111"]
🔁 Iteration 4: i = 4
binary = queue.poll() → Dequeue "100"

Print: 100

Add next binaries:

"1000" → Add binary + "0"

"1001" → Add binary + "1"

📌 Queue after Iteration 4:
vbnet
Copy
Edit
Queue: ["101", "110", "111", "1000", "1001"]
🔁 Iteration 5: i = 5
binary = queue.poll() → Dequeue "101"

Print: 101

Add next binaries:

"1010" → Add binary + "0"

"1011" → Add binary + "1"

📌 Queue after Iteration 5:
vbnet
Copy
Edit
Queue: ["110", "111", "1000", "1001", "1010", "1011"]
✅ We have generated 5 binary numbers, so the loop ends here.

🔥 Step 3: Print the Result
📝 Final Output:
Copy
Edit
1 10 11 100 101
⚡️ Final Queue State:
vbnet
Copy
Edit
Queue: ["110", "111", "1000", "1001", "1010", "1011"]
📊 Time Complexity Analysis:
Generating N Binary Numbers:

For every binary number generated, 2 more numbers are added to the queue.

Each operation of enqueue and dequeue takes O(1).

Overall Time Complexity:

O(N)
O(N)
💾 Space Complexity Analysis:
Space for Queue:

The queue stores at most 2N binary numbers.

Overall Space Complexity:

O(N)
O(N)
📝 Summary of Key Points:
✅ The algorithm efficiently generates binary numbers from 1 to N using a queue.
✅ Binary numbers are generated by appending 0 and 1 to the front element dequeued from the queue.
✅ Final output for N = 5 is:

Copy
Edit
1 10 11 100 101
Let me know if you want to practice more DSA problems like this! 😊*/